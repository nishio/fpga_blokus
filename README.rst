=============
 FPGA Blokus
=============

目標
----

- DE0でBlokus DuoのAIが動くようにする
- ルール: http://lut.eee.u-ryukyu.ac.jp/dc13/rules.html

History & TODO
--------------

ボードの表示
~~~~~~~~~~~~

done: ボードの表示はできた。サイドバーの表示は完成していないけども優先度変更。

- VGAにカラー出力を出すためにSDRAMでVRAMを作る(Embedded Memoryでは足りない)
- SDRAMをVRAMに使うのはタイミングとかの調整がめんどくさい？画面をボードと手駒表示部に分ければEmbedded Memoryで収まる量になるのでは？
- Embedded Memoryでやる方針で。
- 初期画面の出力(block.py)

done: サイドの表示をまともに。ただしまだ「使われたピースを消す」は未対応。


ピースを置く
~~~~~~~~~~~~

合法手判定の前に、まずは「ピースを置く」を実装して正しく動くことを確認

- ピースのパターンをROMに入れる、正立、回転 横5 x 縦7 x 3bit x 21種類 x 8方位 = 17640bit
- 5 * 7 * 3 = 105, 21 * 8 = 168。105bit * 168wordsのROMを作成した。3 M9K。
- むしろピースの回転は配線でできるから入れなくていい？(LEとROMのどちらが貴重なリソースになるか)
- 楽なのはROMに入れとく方法だと思うので入れちゃおう。
- ピースの中心がどこであるか(0~34)を6bitで表現

- ボードはたかが14x14に1マスの番兵を加えて225マス、1マスあたり6bit、LEを使ったシフトレジスタで実現(1350LE、使いすぎ？でもモンテカルロをやる上で合法手の列挙はボトルネックになる。これくらい使っていいのでは)
- シフトレジスタがいくつシフトした状態であるか(0~224)を8bitで持つ。VRAMに転送する時に0の位置から転送できるように。

- 初手の合法手判定が面倒なので初手を決め打ちする。期待通りに決め打ちできているかでこのマイルストーンの成否をチェック。


合法手判定
~~~~~~~~~~

todo: 合法手を交互に選んでランダムプレイアウト


- 初手の合法手判定だけ特別ルールなので、それを合法手判定ルーチンに分岐として入れるよりは、列挙してしまったほうが良いのでは。
- 最初の一手の合法手は相手の手によらず不変
- とりあえず最初の一歩としては最初の手を固定するのでいいか

- シフトレジスタを使った合法手判定
- Fanout数を減らすためにシフトレジスタのランダムな位置からパターンマッチを生やす(なるべくFanoutが少なくなるように最適化)
- パターンマッチの配置がランダムであることから、探索開始位置をランダムにすれば、結果として選択されるものもおおよそランダム(同じ位置で複数個マッチする可能性があるので厳密には等確率ではないが、たぶん強さにはあんまり関係ない)、これでたぶん100倍程度速くなるはず。
- パターンマッチは各ライブセルごとに Valid = AND(NOR(他のブロック), NOR(自ブロック), NOR(自辺), OR(自角))を計算することになるので、最悪ケースでANDの中身各々3LE、ANDが1LEの13LE。21個のブロックの8方位(実際はもっと減らせる)を掛けて、2184LE

- 合法である手を数えながら溜めて、その中からランダムに1つ選び出す回路が必要

ランダムプレイアウト
~~~~~~~~~~~~~~~~~~~~

- 交互にランダムに打つ(合法手判定が正しく動いているか確認): バグの再現性のために乱数シードを固定する機能が必要

- ボタンとスイッチで人間がプレイできるようにする(この時点ではAIはただのランダム)
- AIをJavaRockで作れるようにする。AIは別ファイルにして、手軽に切り替えられるようにする。
- モンテカルロ(UCB1)AI プレイアウトを画面に表示しながらやる
- ←UCBが最大である合法手を見つけるルーチンはどうやるのが良いか？合法手は最大で32000個程度。2個ずつ比較したら15クロック？
- ←UCBの計算、まじめにlogやsqrtをやるのは馬鹿らしい。どう手を抜くか？
- モンテカルロ同士で何百回か対戦させて勝率を確認できるようにする AIを改善していくために。
- ←時間を揃えないと平等ではないから一定時間後に割り込んでそこまでのプレイアウトで結論を出させる仕組みが必要


方針

- コア部分はDE0で動くようにする。将来的にDE2などでしか動かないでかいAIを作るにしても、うまく切り離して、DE0しか持っていない人が手軽に試せる状態をキープする。
- コア部分のライセンスはMITライセンスとする。GPLを避けるという意図。

Memo
====

- DE0:  Device Family: CycloneIII, Package: FBGA, Pin count: 484, Speed grade: 6, EP3C16F484C6
- Menu -> Assignment -> Import Assignments -> "pin_assign,csv"
- http://lut.eee.u-ryukyu.ac.jp/dc13/rules.html
- 15200 bps, no parity and 1 stop bit


Reference
=========

- [1] 芹井 滋喜 "超入門！FPGAスタータ・キットDE0で始めるVerilog HDL"
  http://www.amazon.co.jp/dp/478983137X
- [2] 小林 優 "FPGA ボードで学ぶ組込みシステム開発入門　~Altera編~"
  http://www.amazon.co.jp/dp/4774148393
- [3] 三好 健文 "Hello Worldから始めるFPGA入門", インターフェースZERO, No.04
  http://www.amazon.co.jp/dp/478984935X
- [4] "BlokusDuo/JavaRock" http://www.wasamon.net/miyo/index.cgi?page=Diary%2F2013%2D6%2D11 2013-06-17確認
- [5] "続BlokusDuo/JavaRock" http://www.wasamon.net/miyo/index.cgi?page=Diary%2F2013%2D6%2D12 2013-06-17確認
- [6] "続続BlokusDuo/JavaRock" http://www.wasamon.net/miyo/index.cgi?page=Diary%2F2013-6-13 2013-06-17確認
- [7] "ブロックスデュオ プログラム対戦 結果 - iroriの日記" http://d.hatena.ne.jp/Irori/20071104/1194151812 2013-06-17確認
- [8] "JavaRock" http://sourceforge.net/projects/javarock/files/20130612/ 2013-06-17確認

